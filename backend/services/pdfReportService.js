import PDFDocument from 'pdfkit';
import fs from 'fs';
import path from 'path';

class PDFReportService {
  constructor() {
    this.colors = {
      primary: '#1f2937',
      secondary: '#6b7280',
      accent: '#3b82f6',
      success: '#10b981',
      warning: '#f59e0b',
      danger: '#ef4444'
    };
  }

  drawTable(doc, data, columnWidths) {
    const startY = doc.y + 10;
    const rowHeight = 20;
    let currentY = startY;

    data.forEach((row, rowIndex) => {
      let currentX = 70;
      
      row.forEach((cell, colIndex) => {
        // Draw cell border
        doc.rect(currentX, currentY, columnWidths[colIndex], rowHeight)
           .strokeColor(this.colors.secondary)
           .stroke();

        // Fill header row
        if (rowIndex === 0) {
          doc.rect(currentX, currentY, columnWidths[colIndex], rowHeight)
             .fillColor('#f8f9fa')
             .fill();
        }

        // Add text
        const fontSize = rowIndex === 0 ? 9 : 8;
        const textColor = rowIndex === 0 ? this.colors.primary : this.colors.secondary;
        
        doc.fontSize(fontSize)
           .fillColor(textColor)
           .text(cell, currentX + 5, currentY + 6, { 
             width: columnWidths[colIndex] - 10, 
             align: 'left' 
           });

        currentX += columnWidths[colIndex];
      });
      
      currentY += rowHeight;
    });

    doc.y = currentY + 10;
  }

  /**
   * Generate a comprehensive competitor analysis PDF report
   */
  async generateCompetitorReport(data) {
    return new Promise((resolve, reject) => {
      try {
        const doc = new PDFDocument({
          size: 'A4',
          margins: { top: 50, bottom: 50, left: 50, right: 50 }
        });

        const chunks = [];
        doc.on('data', chunk => chunks.push(chunk));
        doc.on('end', () => resolve(Buffer.concat(chunks)));

        // Generate comprehensive report content
        this.addCoverPage(doc, data);
        this.addTableOfContents(doc);
        this.addExecutiveSummary(doc, data);
        this.addPerformanceAnalysis(doc, data);
        this.addSEODetailedComparison(doc, data);
        this.addTechnologyStackDetailed(doc, data);
        this.addTrafficDetailedAnalysis(doc, data);
        this.addBacklinksDetailedAnalysis(doc, data);
        this.addContentDetailedAnalysis(doc, data);
        this.addSocialMediaDetailedAnalysis(doc, data);
        this.addSecurityAnalysis(doc, data);
        this.addCompetitiveAdvantages(doc, data);
        this.addActionableRecommendations(doc, data);
        this.addImplementationRoadmap(doc, data);
        this.addFooter(doc);

        doc.end();
      } catch (error) {
        reject(error);
      }
    });
  }

  addCoverPage(doc, data) {
    const { yourSite, competitorSite } = data;
    
    // Main Title
    doc.fontSize(32)
       .fillColor(this.colors.primary)
       .text('COMPETITOR', 50, 150, { align: 'center' });
    
    doc.fontSize(32)
       .fillColor(this.colors.accent)
       .text('INTELLIGENCE', 50, 190, { align: 'center' });
    
    doc.fontSize(32)
       .fillColor(this.colors.primary)
       .text('REPORT', 50, 230, { align: 'center' });

    // Subtitle with domains
    doc.fontSize(18)
       .fillColor(this.colors.secondary)
       .text(`${yourSite?.domain || 'Your Site'}`, 50, 320, { align: 'center' });
    
    doc.fontSize(16)
       .fillColor(this.colors.secondary)
       .text('VS', 50, 350, { align: 'center' });
    
    doc.fontSize(18)
       .fillColor(this.colors.secondary)
       .text(`${competitorSite?.domain || 'Competitor'}`, 50, 380, { align: 'center' });

    // Analysis date and details
    doc.fontSize(12)
       .fillColor(this.colors.secondary)
       .text(`Analysis Date: ${new Date().toLocaleDateString('en-US', { 
         year: 'numeric', 
         month: 'long', 
         day: 'numeric' 
       })}`, 50, 500, { align: 'center' });

    doc.fontSize(10)
       .fillColor(this.colors.secondary)
       .text('Comprehensive Digital Marketing & SEO Analysis', 50, 520, { align: 'center' });

    // Add decorative elements
    doc.rect(50, 600, 495, 2)
       .fillColor(this.colors.accent)
       .fill();

    doc.fontSize(8)
       .fillColor(this.colors.secondary)
       .text('Generated by AgenticForge Competitor Intelligence Platform', 50, 720, { align: 'center' });

    doc.addPage();
  }

  addTableOfContents(doc) {
    this.addSectionTitle(doc, 'Table of Contents');
    
    const contents = [
      { title: 'Executive Summary', page: 3 },
      { title: 'Performance Analysis', page: 4 },
      { title: 'SEO Detailed Comparison', page: 5 },
      { title: 'Technology Stack Analysis', page: 6 },
      { title: 'Traffic & Audience Analysis', page: 7 },
      { title: 'Backlinks & Authority Analysis', page: 8 },
      { title: 'Content Strategy Analysis', page: 9 },
      { title: 'Social Media Presence', page: 10 },
      { title: 'Security & Technical Analysis', page: 11 },
      { title: 'Competitive Advantages', page: 12 },
      { title: 'Actionable Recommendations', page: 13 },
      { title: 'Implementation Roadmap', page: 14 }
    ];

    doc.fontSize(12)
       .fillColor(this.colors.primary);

    contents.forEach((item, index) => {
      const y = doc.y + 15;
      doc.text(`${index + 1}. ${item.title}`, 70, y);
      doc.text(`${item.page}`, 500, y, { align: 'right' });
      
      // Add dotted line
      const dots = '.'.repeat(Math.floor((400 - item.title.length * 6) / 6));
      doc.fontSize(8)
         .fillColor(this.colors.secondary)
         .text(dots, 70 + item.title.length * 7, y + 2);
      doc.fontSize(12)
         .fillColor(this.colors.primary);
    });

    doc.addPage();
  }

  addExecutiveSummary(doc, data) {
    const { comparison, yourSite, competitorSite } = data;
    
    this.addSectionTitle(doc, 'Executive Summary');

    // Key Findings Box
    this.addInfoBox(doc, 'Key Findings', [
      `Analysis conducted on ${new Date().toLocaleDateString()}`,
      `Comparing ${yourSite?.domain} against ${competitorSite?.domain}`,
      `Comprehensive evaluation across 12 key digital marketing metrics`
    ]);

    // Performance Scorecard
    doc.fontSize(14)
       .fillColor(this.colors.primary)
       .text('Performance Scorecard', 50, doc.y + 20);

    const metrics = [
      { name: 'SEO Performance', yours: comparison?.seo?.yours || 0, competitor: comparison?.seo?.competitor || 0 },
      { name: 'Page Speed', yours: comparison?.performance?.yours || 0, competitor: comparison?.performance?.competitor || 0 },
      { name: 'Content Quality', yours: comparison?.content?.your?.wordCount || 0, competitor: comparison?.content?.competitor?.wordCount || 0, isCount: true },
      { name: 'Backlink Authority', yours: comparison?.backlinks?.yours || 0, competitor: comparison?.backlinks?.competitor || 0, isCount: true }
    ];

    metrics.forEach((metric, index) => {
      const y = doc.y + 15;
      doc.fontSize(11)
         .fillColor(this.colors.primary)
         .text(metric.name, 70, y);

      // Your score
      const yourScore = metric.isCount ? metric.yours.toLocaleString() : `${metric.yours}/100`;
      doc.fontSize(10)
         .fillColor(this.colors.success)
         .text(`Your Site: ${yourScore}`, 250, y);

      // Competitor score  
      const compScore = metric.isCount ? metric.competitor.toLocaleString() : `${metric.competitor}/100`;
      doc.fontSize(10)
         .fillColor(this.colors.danger)
         .text(`Competitor: ${compScore}`, 400, y);

      // Winner indicator
      const winner = metric.yours > metric.competitor ? '✓' : '✗';
      const winnerColor = metric.yours > metric.competitor ? this.colors.success : this.colors.danger;
      doc.fontSize(12)
         .fillColor(winnerColor)
         .text(winner, 520, y);
    });

    // Strategic Insights
    doc.fontSize(14)
       .fillColor(this.colors.primary)
       .text('Strategic Insights', 50, doc.y + 30);

    const insights = this.generateStrategicInsights(comparison);
    insights.forEach((insight, index) => {
      doc.fontSize(10)
         .fillColor(this.colors.secondary)
         .text(`• ${insight}`, 70, doc.y + 12);
    });

    doc.addPage();
  }

  addPerformanceAnalysis(doc, data) {
    const { comparison, yourSite, competitorSite } = data;
    
    this.addSectionTitle(doc, 'Performance Analysis');

    // Lighthouse Scores Comparison
    if (comparison?.performance || yourSite?.lighthouse || competitorSite?.lighthouse) {
      doc.fontSize(13)
         .fillColor(this.colors.primary)
         .text('Lighthouse Performance Scores', 50, doc.y + 15);

      const performanceData = [
        { 
          metric: 'Performance', 
          yours: yourSite?.lighthouse?.categories?.performance?.displayValue || 0,
          competitor: competitorSite?.lighthouse?.categories?.performance?.displayValue || 0
        },
        { 
          metric: 'Accessibility', 
          yours: yourSite?.lighthouse?.categories?.accessibility?.displayValue || 0,
          competitor: competitorSite?.lighthouse?.categories?.accessibility?.displayValue || 0
        },
        { 
          metric: 'Best Practices', 
          yours: yourSite?.lighthouse?.categories?.['best-practices']?.displayValue || 0,
          competitor: competitorSite?.lighthouse?.categories?.['best-practices']?.displayValue || 0
        },
        { 
          metric: 'SEO', 
          yours: yourSite?.lighthouse?.categories?.seo?.displayValue || 0,
          competitor: competitorSite?.lighthouse?.categories?.seo?.displayValue || 0
        }
      ];

      this.drawPerformanceChart(doc, performanceData);
    }

    // Core Web Vitals
    if (yourSite?.pagespeed || competitorSite?.pagespeed) {
      doc.fontSize(13)
         .fillColor(this.colors.primary)
         .text('Core Web Vitals Comparison', 50, doc.y + 30);

      const webVitals = [
        { 
          metric: 'Largest Contentful Paint (LCP)', 
          yours: yourSite?.pagespeed?.mobile?.labData?.lcp || 0,
          competitor: competitorSite?.pagespeed?.mobile?.labData?.lcp || 0,
          unit: 'ms',
          lowerIsBetter: true
        },
        { 
          metric: 'First Input Delay (FID)', 
          yours: yourSite?.pagespeed?.mobile?.labData?.fid || 0,
          competitor: competitorSite?.pagespeed?.mobile?.labData?.fid || 0,
          unit: 'ms',
          lowerIsBetter: true
        },
        { 
          metric: 'Cumulative Layout Shift (CLS)', 
          yours: yourSite?.pagespeed?.mobile?.labData?.cls || 0,
          competitor: competitorSite?.pagespeed?.mobile?.labData?.cls || 0,
          unit: '',
          lowerIsBetter: true
        }
      ];

      webVitals.forEach((vital, index) => {
        const y = doc.y + 15;
        doc.fontSize(10)
           .fillColor(this.colors.primary)
           .text(vital.metric, 70, y);

        const yourValue = `${Math.round(vital.yours)}${vital.unit}`;
        const compValue = `${Math.round(vital.competitor)}${vital.unit}`;

        doc.fontSize(9)
           .fillColor(this.colors.secondary)
           .text(`Your Site: ${yourValue}`, 250, y)
           .text(`Competitor: ${compValue}`, 350, y);

        // Performance indicator
        const yourBetter = vital.lowerIsBetter ? vital.yours < vital.competitor : vital.yours > vital.competitor;
        const indicator = yourBetter ? '✓ Better' : '✗ Needs Improvement';
        const indicatorColor = yourBetter ? this.colors.success : this.colors.warning;
        
        doc.fontSize(9)
           .fillColor(indicatorColor)
           .text(indicator, 450, y);
      });
    }

    doc.addPage();
  }

  addSEODetailedComparison(doc, data) {
    const { yourSite, competitorSite, comparison } = data;
    
    this.addSectionTitle(doc, 'SEO Detailed Comparison');

    // SEO Score Overview
    if (comparison?.seo) {
      this.addInfoBox(doc, 'SEO Performance Overview', [
        `Your Site SEO Score: ${comparison.seo.yours}/100`,
        `Competitor SEO Score: ${comparison.seo.competitor}/100`,
        `Performance Gap: ${Math.abs(comparison.seo.difference)} points`,
        `Winner: ${comparison.seo.winner === 'yours' ? 'Your Site' : 'Competitor'}`
      ]);
    }

    // Meta Tags Analysis
    if (comparison?.seo?.metaTags) {
      doc.fontSize(13)
         .fillColor(this.colors.primary)
         .text('Meta Tags Analysis', 50, doc.y + 25);

      const yourMeta = comparison.seo.metaTags.your;
      const compMeta = comparison.seo.metaTags.competitor;

      // Create comparison table
      const metaComparison = [
        ['Element', 'Your Site', 'Competitor', 'Status'],
        ['Title Tag', yourMeta?.hasTitle ? '✓ Present' : '✗ Missing', compMeta?.hasTitle ? '✓ Present' : '✗ Missing', yourMeta?.hasTitle === compMeta?.hasTitle ? 'Equal' : (yourMeta?.hasTitle ? 'Advantage' : 'Behind')],
        ['Meta Description', yourMeta?.hasDescription ? '✓ Present' : '✗ Missing', compMeta?.hasDescription ? '✓ Present' : '✗ Missing', yourMeta?.hasDescription === compMeta?.hasDescription ? 'Equal' : (yourMeta?.hasDescription ? 'Advantage' : 'Behind')]
      ];

      this.drawTable(doc, metaComparison, [120, 120, 120, 100]);

      // Title and Description Content
      if (yourMeta?.title || compMeta?.title) {
        doc.fontSize(12)
           .fillColor(this.colors.primary)
           .text('Title Tag Content:', 50, doc.y + 20);

        if (yourMeta?.title) {
          doc.fontSize(9)
             .fillColor(this.colors.secondary)
             .text(`Your Site: "${yourMeta.title}"`, 70, doc.y + 12, { width: 450 });
        }

        if (compMeta?.title) {
          doc.fontSize(9)
             .fillColor(this.colors.secondary)
             .text(`Competitor: "${compMeta.title}"`, 70, doc.y + 12, { width: 450 });
        }
      }
    }

    // Heading Structure Analysis
    if (comparison?.seo?.headings) {
      doc.fontSize(13)
         .fillColor(this.colors.primary)
         .text('Heading Structure Analysis', 50, doc.y + 25);

      const headingData = [
        ['Heading Level', 'Your Site', 'Competitor', 'Recommendation'],
        ['H1 Tags', comparison.seo.headings.your.h1Count.toString(), comparison.seo.headings.competitor.h1Count.toString(), comparison.seo.headings.your.h1Count === 1 ? 'Optimal' : 'Review Structure'],
        ['H2 Tags', comparison.seo.headings.your.h2Count.toString(), comparison.seo.headings.competitor.h2Count.toString(), 'Good for Content Hierarchy'],
        ['H3 Tags', comparison.seo.headings.your.h3Count.toString(), comparison.seo.headings.competitor.h3Count.toString(), 'Supports Content Organization']
      ];

      this.drawTable(doc, headingData, [120, 80, 80, 175]);
    }

    doc.addPage();
  }

  addTechnologyStack(doc, data) {
    const { yourSite, competitorSite } = data;
    
    this.addSectionTitle(doc, 'Technology Stack Analysis');

    // Your Site Technology
    const yourTech = yourSite?.puppeteer?.technology;
    if (yourTech) {
      doc.fontSize(12)
         .fillColor(this.colors.primary)
         .text('Your Site Technology:', doc.x, doc.y + 10);

      if (yourTech.cms) {
        doc.fontSize(10)
           .fillColor(this.colors.secondary)
           .text(`CMS: ${yourTech.cms}`, doc.x + 20, doc.y + 10);
      }

      if (yourTech.frameworks?.length > 0) {
        doc.text(`Frameworks: ${yourTech.frameworks.join(', ')}`, doc.x + 20, doc.y + 5);
      }

      if (yourTech.analytics?.length > 0) {
        doc.text(`Analytics: ${yourTech.analytics.join(', ')}`, doc.x + 20, doc.y + 5);
      }
    }

    // Competitor Technology
    const compTech = competitorSite?.puppeteer?.technology;
    if (compTech) {
      doc.fontSize(12)
         .fillColor(this.colors.primary)
         .text('Competitor Technology:', doc.x, doc.y + 20);

      if (compTech.cms) {
        doc.fontSize(10)
           .fillColor(this.colors.secondary)
           .text(`CMS: ${compTech.cms}`, doc.x + 20, doc.y + 10);
      }

      if (compTech.frameworks?.length > 0) {
        doc.text(`Frameworks: ${compTech.frameworks.join(', ')}`, doc.x + 20, doc.y + 5);
      }

      if (compTech.analytics?.length > 0) {
        doc.text(`Analytics: ${compTech.analytics.join(', ')}`, doc.x + 20, doc.y + 5);
      }
    }

    doc.y += 30;
  }

  addTrafficAnalysis(doc, data) {
    const { yourSite, competitorSite, comparison } = data;
    
    this.addSectionTitle(doc, 'Traffic Analysis');

    if (comparison?.traffic) {
      doc.fontSize(12)
         .fillColor(this.colors.primary)
         .text('Monthly Visits:', doc.x, doc.y + 10);

      doc.fontSize(10)
         .fillColor(this.colors.secondary)
         .text(`Your Site: ${comparison.traffic.your.monthlyVisits?.toLocaleString() || 'N/A'}`, doc.x + 20, doc.y + 10)
         .text(`Competitor: ${comparison.traffic.competitor.monthlyVisits?.toLocaleString() || 'N/A'}`, doc.x + 20, doc.y + 5);

      if (comparison.traffic.your.bounceRate) {
        doc.text(`Your Bounce Rate: ${comparison.traffic.your.bounceRate}`, doc.x + 20, doc.y + 10);
      }
      
      if (comparison.traffic.competitor.bounceRate) {
        doc.text(`Competitor Bounce Rate: ${comparison.traffic.competitor.bounceRate}`, doc.x + 20, doc.y + 5);
      }
    }

    doc.y += 30;
  }

  addBacklinksAnalysis(doc, data) {
    const { comparison } = data;
    
    this.addSectionTitle(doc, 'Backlinks Analysis');

    if (comparison?.backlinks) {
      doc.fontSize(12)
         .fillColor(this.colors.primary)
         .text('Backlink Profile:', doc.x, doc.y + 10);

      doc.fontSize(10)
         .fillColor(this.colors.secondary)
         .text(`Your Site: ${comparison.backlinks.yours?.toLocaleString() || 'N/A'} backlinks`, doc.x + 20, doc.y + 10)
         .text(`Competitor: ${comparison.backlinks.competitor?.toLocaleString() || 'N/A'} backlinks`, doc.x + 20, doc.y + 5);

      const winner = comparison.backlinks.winner === 'yours' ? 'Your site' : 'Competitor';
      doc.text(`${winner} has a stronger backlink profile`, doc.x + 20, doc.y + 10);
    }

    doc.y += 30;
  }

  addContentAnalysis(doc, data) {
    const { comparison } = data;
    
    this.addSectionTitle(doc, 'Content Analysis');

    if (comparison?.content) {
      doc.fontSize(12)
         .fillColor(this.colors.primary)
         .text('Content Metrics:', doc.x, doc.y + 10);

      doc.fontSize(10)
         .fillColor(this.colors.secondary)
         .text(`Your Site Word Count: ${comparison.content.your.wordCount?.toLocaleString() || 'N/A'}`, doc.x + 20, doc.y + 10)
         .text(`Competitor Word Count: ${comparison.content.competitor.wordCount?.toLocaleString() || 'N/A'}`, doc.x + 20, doc.y + 5)
         .text(`Your Site Images: ${comparison.content.your.imageCount || 'N/A'}`, doc.x + 20, doc.y + 5)
         .text(`Competitor Images: ${comparison.content.competitor.imageCount || 'N/A'}`, doc.x + 20, doc.y + 5);
    }

    doc.y += 30;
  }

  addSocialMediaAnalysis(doc, data) {
    const { yourSite, competitorSite } = data;
    
    this.addSectionTitle(doc, 'Social Media Analysis');

    // Instagram Analysis
    if (yourSite?.instagram || competitorSite?.instagram) {
      doc.fontSize(12)
         .fillColor(this.colors.primary)
         .text('Instagram Metrics:', doc.x, doc.y + 10);

      if (yourSite?.instagram?.profile) {
        doc.fontSize(10)
           .fillColor(this.colors.secondary)
           .text(`Your Instagram Followers: ${yourSite.instagram.profile.followers?.toLocaleString() || 'N/A'}`, doc.x + 20, doc.y + 10);
      }

      if (competitorSite?.instagram?.profile) {
        doc.text(`Competitor Instagram Followers: ${competitorSite.instagram.profile.followers?.toLocaleString() || 'N/A'}`, doc.x + 20, doc.y + 5);
      }
    }

    // Facebook Analysis
    if (yourSite?.facebook || competitorSite?.facebook) {
      doc.fontSize(12)
         .fillColor(this.colors.primary)
         .text('Facebook Metrics:', doc.x, doc.y + 15);

      if (yourSite?.facebook?.metrics) {
        doc.fontSize(10)
           .fillColor(this.colors.secondary)
           .text(`Your Facebook Followers: ${yourSite.facebook.metrics.followers?.toLocaleString() || 'N/A'}`, doc.x + 20, doc.y + 10);
      }

      if (competitorSite?.facebook?.metrics) {
        doc.text(`Competitor Facebook Followers: ${competitorSite.facebook.metrics.followers?.toLocaleString() || 'N/A'}`, doc.x + 20, doc.y + 5);
      }
    }

    doc.y += 30;
  }

  addRecommendations(doc, data) {
    this.addSectionTitle(doc, 'Strategic Recommendations');

    const recommendations = [
      'Improve page loading speed to enhance user experience',
      'Optimize meta descriptions for better search visibility',
      'Increase content depth to match competitor standards',
      'Build high-quality backlinks to improve domain authority',
      'Enhance social media presence and engagement'
    ];

    doc.fontSize(10)
       .fillColor(this.colors.secondary);

    recommendations.forEach((rec, index) => {
      doc.text(`${index + 1}. ${rec}`, doc.x + 20, doc.y + 10);
    });

    doc.y += 30;
  }

  addSectionTitle(doc, title) {
    // Check if we need a new page
    if (doc.y > 700) {
      doc.addPage();
    }

    doc.fontSize(18)
       .fillColor(this.colors.primary)
       .text(title, 50, doc.y + 25);

    // Add underline
    doc.moveTo(50, doc.y + 8)
       .lineTo(300, doc.y + 8)
       .strokeColor(this.colors.accent)
       .lineWidth(2)
       .stroke();

    doc.y += 15;
  }

  addInfoBox(doc, title, items) {
    // Background box
    doc.rect(50, doc.y + 10, 495, items.length * 15 + 30)
       .fillColor('#f8f9fa')
       .fill();

    doc.rect(50, doc.y + 10, 495, items.length * 15 + 30)
       .strokeColor(this.colors.accent)
       .lineWidth(1)
       .stroke();

    // Title
    doc.fontSize(12)
       .fillColor(this.colors.primary)
       .text(title, 60, doc.y + 20);

    // Items
    doc.fontSize(10)
       .fillColor(this.colors.secondary);
    
    items.forEach((item, index) => {
      doc.text(`• ${item}`, 70, doc.y + 15);
    });

    doc.y += 20;
  }

  drawPerformanceChart(doc, data) {
    const chartY = doc.y + 20;
    const chartHeight = 120;
    const chartWidth = 400;
    const barWidth = 30;
    const spacing = 80;

    // Chart background
    doc.rect(70, chartY, chartWidth, chartHeight)
       .strokeColor(this.colors.secondary)
       .stroke();

    // Draw bars for each metric
    data.forEach((item, index) => {
      const x = 90 + (index * spacing);
      
      // Your site bar
      const yourHeight = (item.yours / 100) * (chartHeight - 20);
      doc.rect(x, chartY + chartHeight - yourHeight - 10, barWidth, yourHeight)
         .fillColor(this.colors.success)
         .fill();

      // Competitor bar
      const compHeight = (item.competitor / 100) * (chartHeight - 20);
      doc.rect(x + barWidth + 5, chartY + chartHeight - compHeight - 10, barWidth, compHeight)
         .fillColor(this.colors.danger)
         .fill();

      // Labels
      doc.fontSize(8)
         .fillColor(this.colors.primary)
         .text(item.metric, x - 5, chartY + chartHeight + 5, { width: barWidth * 2 + 5, align: 'center' });

      // Values
      doc.fontSize(7)
         .fillColor(this.colors.success)
         .text(item.yours.toString(), x + 5, chartY + chartHeight - yourHeight - 25, { align: 'center' });
      
      doc.fontSize(7)
         .fillColor(this.colors.danger)
         .text(item.competitor.toString(), x + barWidth + 10, chartY + chartHeight - compHeight - 25, { align: 'center' });
    });

    // Legend
    doc.fontSize(9)
       .fillColor(this.colors.success)
       .text('■ Your Site', 70, chartY + chartHeight + 25);
    
    doc.fontSize(9)
       .fillColor(this.colors.danger)
       .text('■ Competitor', 150, chartY + chartHeight + 25);

    doc.y = chartY + chartHeight + 50;
  }

  generateStrategicInsights(comparison) {
    const insights = [];
    
    if (comparison?.seo?.winner === 'yours') {
      insights.push(`Your SEO strategy is outperforming the competitor by ${comparison.seo.difference} points`);
    } else if (comparison?.seo?.winner === 'competitor') {
      insights.push(`Competitor has a ${comparison.seo.difference}-point SEO advantage - focus on optimization`);
    }

    if (comparison?.performance?.winner === 'yours') {
      insights.push(`Your site loads faster, providing better user experience`);
    } else if (comparison?.performance?.winner === 'competitor') {
      insights.push(`Competitor site loads faster - prioritize performance optimization`);
    }

    if (comparison?.backlinks?.winner === 'competitor') {
      insights.push(`Competitor has stronger domain authority with ${comparison.backlinks.competitor.toLocaleString()} backlinks`);
    }

    if (comparison?.traffic?.winner === 'competitor') {
      insights.push(`Competitor receives significantly more organic traffic - content strategy needs attention`);
    }

    return insights.length > 0 ? insights : ['Comprehensive analysis completed across all digital marketing channels'];
  }

  // Missing methods - adding simplified versions
  addTechnologyStackDetailed(doc, data) {
    this.addTechnologyStack(doc, data);
  }

  addTrafficDetailedAnalysis(doc, data) {
    this.addTrafficAnalysis(doc, data);
  }

  addBacklinksDetailedAnalysis(doc, data) {
    this.addBacklinksAnalysis(doc, data);
  }

  addContentDetailedAnalysis(doc, data) {
    this.addContentAnalysis(doc, data);
  }

  addSocialMediaDetailedAnalysis(doc, data) {
    this.addSocialMediaAnalysis(doc, data);
  }

  addSecurityAnalysis(doc, data) {
    const { yourSite, competitorSite } = data;
    
    this.addSectionTitle(doc, 'Security Analysis');

    doc.fontSize(12)
       .fillColor(this.colors.primary)
       .text('Security Features:', doc.x, doc.y + 10);

    // HTTPS Check
    const yourHTTPS = yourSite?.puppeteer?.security?.isHTTPS;
    const compHTTPS = competitorSite?.puppeteer?.security?.isHTTPS;

    doc.fontSize(10)
       .fillColor(this.colors.secondary)
       .text(`Your Site HTTPS: ${yourHTTPS ? '✓ Enabled' : '✗ Missing'}`, doc.x + 20, doc.y + 10)
       .text(`Competitor HTTPS: ${compHTTPS ? '✓ Enabled' : '✗ Missing'}`, doc.x + 20, doc.y + 5);

    doc.y += 30;
  }

  addCompetitiveAdvantages(doc, data) {
    const { comparison } = data;
    
    this.addSectionTitle(doc, 'Competitive Advantages');

    const advantages = [];
    
    if (comparison?.seo?.winner === 'yours') {
      advantages.push('Superior SEO performance');
    }
    if (comparison?.performance?.winner === 'yours') {
      advantages.push('Faster page loading speeds');
    }
    if (comparison?.backlinks?.winner === 'yours') {
      advantages.push('Stronger backlink profile');
    }

    if (advantages.length === 0) {
      advantages.push('Areas for improvement identified');
    }

    doc.fontSize(10)
       .fillColor(this.colors.secondary);

    advantages.forEach((advantage, index) => {
      doc.text(`• ${advantage}`, doc.x + 20, doc.y + 10);
    });

    doc.y += 30;
  }

  addActionableRecommendations(doc, data) {
    this.addRecommendations(doc, data);
  }

  addImplementationRoadmap(doc, data) {
    this.addSectionTitle(doc, 'Implementation Roadmap');

    const phases = [
      'Phase 1 (0-30 days): Fix critical SEO issues',
      'Phase 2 (30-60 days): Improve page performance',
      'Phase 3 (60-90 days): Content and link building strategy'
    ];

    doc.fontSize(10)
       .fillColor(this.colors.secondary);

    phases.forEach((phase, index) => {
      doc.text(`${index + 1}. ${phase}`, doc.x + 20, doc.y + 15);
    });

    doc.y += 30;
  }

  addFooter(doc) {
    const pages = doc.bufferedPageRange();
    for (let i = pages.start; i < (pages.start + pages.count); i++) {
      doc.switchToPage(i);
      
      // Add footer
      doc.fontSize(8)
         .fillColor(this.colors.secondary)
         .text(`Generated by Competitor Intelligence Tool - Page ${i - pages.start + 1} of ${pages.count}`, 
               50, 750, { align: 'center', width: 495 });
    }
  }
}

export default new PDFReportService();