import PDFDocument from 'pdfkit';

/**
 * Social Media Report Service
 * Generates comprehensive PDF reports for social media performance
 */
class SocialMediaReportService {
  constructor() {
    this.colors = {
      primary: '#1f2937',
      secondary: '#6b7280',
      accent: '#3b82f6',
      success: '#10b981',
      warning: '#f59e0b',
      danger: '#ef4444',
      facebook: '#1877f2',
      linkedin: '#0a66c2'
    };
  }

  /**
   * Generate a social media performance PDF report
   */
  async generateSocialMediaReport(reportData) {
    return new Promise((resolve, reject) => {
      try {
        const doc = new PDFDocument({
          size: 'A4',
          margins: { top: 50, bottom: 50, left: 50, right: 50 }
        });

        const chunks = [];
        doc.on('data', chunk => chunks.push(chunk));
        doc.on('end', () => resolve(Buffer.concat(chunks)));

        // Generate report content
        this.addCoverPage(doc, reportData);
        this.addExecutiveSummary(doc, reportData);
        this.addEngagementAnalysis(doc, reportData);
        this.addContentPerformance(doc, reportData);
        this.addAudienceInsights(doc, reportData);
        this.addRecommendations(doc, reportData);
        this.addFooter(doc);

        doc.end();
      } catch (error) {
        reject(error);
      }
    });
  }

  addCoverPage(doc, reportData) {
    const { platform, companyName, generatedAt, timeframe } = reportData;
    const platformColor = platform === 'facebook' ? this.colors.facebook : this.colors.linkedin;
    
    // Main Title
    doc.fontSize(32)
       .fillColor(this.colors.primary)
       .text('SOCIAL MEDIA', 50, 150, { align: 'center' });
    
    doc.fontSize(32)
       .fillColor(platformColor)
       .text('PERFORMANCE REPORT', 50, 190, { align: 'center' });

    // Platform and Company
    doc.fontSize(20)
       .fillColor(this.colors.secondary)
       .text(`${platform.toUpperCase()} ANALYTICS`, 50, 280, { align: 'center' });
    
    doc.fontSize(18)
       .fillColor(this.colors.primary)
       .text(companyName || 'Company Name', 50, 320, { align: 'center' });

    // Report Details
    doc.fontSize(12)
       .fillColor(this.colors.secondary)
       .text(`Report Period: ${this.formatTimeframe(timeframe)}`, 50, 420, { align: 'center' })
       .text(`Generated: ${new Date(generatedAt).toLocaleDateString('en-US', { 
         year: 'numeric', 
         month: 'long', 
         day: 'numeric' 
       })}`, 50, 440, { align: 'center' });

    // Decorative elements
    doc.rect(50, 500, 495, 2)
       .fillColor(platformColor)
       .fill();

    doc.fontSize(8)
       .fillColor(this.colors.secondary)
       .text('Generated by CLARYX Social Media Analytics Platform', 50, 720, { align: 'center' });

    doc.addPage();
  }

  addExecutiveSummary(doc, reportData) {
    const { data, platform } = reportData;
    
    this.addSectionTitle(doc, 'Executive Summary');

    // Key Metrics Overview
    this.addInfoBox(doc, 'Performance Highlights', [
      `Platform: ${platform.charAt(0).toUpperCase() + platform.slice(1)}`,
      `Engagement Rate: ${data.engagementScore?.engagementRate || 0}%`,
      `Total Reach: ${this.formatNumber(data.engagementScore?.reach || 0)}`,
      `Followers: ${this.formatNumber(data.reputationBenchmark?.followers || data.companyFollowers || 0)}`
    ]);

    // Engagement Breakdown
    if (data.engagementScore) {
      doc.fontSize(14)
         .fillColor(this.colors.primary)
         .text('Engagement Breakdown', 50, doc.y + 20);

      const engagement = data.engagementScore;
      const metrics = [
        { name: 'Likes', value: engagement.likes || 0, color: this.colors.success },
        { name: 'Comments', value: engagement.comments || 0, color: this.colors.accent },
        { name: 'Shares', value: engagement.shares || 0, color: this.colors.warning }
      ];

      metrics.forEach((metric, index) => {
        const y = doc.y + 15;
        doc.fontSize(11)
           .fillColor(this.colors.primary)
           .text(metric.name, 70, y);

        doc.fontSize(11)
           .fillColor(metric.color)
           .text(this.formatNumber(metric.value), 200, y);

        // Simple bar representation
        const barWidth = Math.min(200, (metric.value / Math.max(...metrics.map(m => m.value))) * 200);
        doc.rect(250, y + 2, barWidth, 8)
           .fillColor(metric.color)
           .fill();
      });
    }

    // Reputation Score
    if (data.reputationBenchmark) {
      doc.fontSize(14)
         .fillColor(this.colors.primary)
         .text('Reputation Score', 50, doc.y + 40);

      doc.fontSize(36)
         .fillColor(this.colors.accent)
         .text(`${data.reputationBenchmark.score}%`, 70, doc.y + 10);

      doc.fontSize(12)
         .fillColor(this.colors.secondary)
         .text(`Sentiment: ${data.reputationBenchmark.sentiment}`, 200, doc.y - 20);
    }

    doc.addPage();
  }

  addEngagementAnalysis(doc, reportData) {
    const { data } = reportData;
    
    this.addSectionTitle(doc, 'Engagement Analysis');

    if (data.engagementScore) {
      // Engagement Rate Analysis
      const engagementRate = data.engagementScore.engagementRate || 0;
      const benchmark = this.getEngagementBenchmark(reportData.platform);

      this.addInfoBox(doc, 'Engagement Performance', [
        `Your Engagement Rate: ${engagementRate.toFixed(2)}%`,
        `Industry Average: ${benchmark}%`,
        `Performance: ${engagementRate > parseFloat(benchmark) ? 'Above Average' : 'Below Average'}`,
        `Total Interactions: ${this.formatNumber((data.engagementScore.likes || 0) + (data.engagementScore.comments || 0) + (data.engagementScore.shares || 0))}`
      ]);

      // Engagement Trends
      if (data.followerGrowth && data.followerGrowth.length > 0) {
        doc.fontSize(14)
           .fillColor(this.colors.primary)
           .text('Follower Growth Trend', 50, doc.y + 25);

        // Simple trend analysis
        const growth = data.followerGrowth;
        const latestFollowers = growth[growth.length - 1]?.followers || 0;
        const previousFollowers = growth[Math.max(0, growth.length - 7)]?.followers || latestFollowers;
        const weeklyGrowth = latestFollowers - previousFollowers;
        const growthRate = previousFollowers > 0 ? ((weeklyGrowth / previousFollowers) * 100).toFixed(2) : 0;

        doc.fontSize(12)
           .fillColor(this.colors.secondary)
           .text(`Current Followers: ${this.formatNumber(latestFollowers)}`, 70, doc.y + 15)
           .text(`Weekly Growth: ${weeklyGrowth >= 0 ? '+' : ''}${weeklyGrowth} (${growthRate}%)`, 70, doc.y + 5)
           .text(`Growth Status: ${weeklyGrowth >= 0 ? 'Growing' : 'Declining'}`, 70, doc.y + 5);
      }
    }

    doc.addPage();
  }

  addContentPerformance(doc, reportData) {
    const { data } = reportData;
    
    this.addSectionTitle(doc, 'Content Performance');

    if (data.topPosts && data.topPosts.length > 0) {
      doc.fontSize(14)
         .fillColor(this.colors.primary)
         .text('Top Performing Posts', 50, doc.y + 15);

      // Create table for top posts
      const tableData = [
        ['Post Format', 'Reach', 'Likes', 'Comments', 'Shares']
      ];

      data.topPosts.slice(0, 5).forEach(post => {
        tableData.push([
          post.format,
          post.reach,
          post.likes,
          post.comments,
          post.shares
        ]);
      });

      this.drawTable(doc, tableData, [100, 80, 80, 80, 80]);

      // Content Insights
      doc.fontSize(14)
         .fillColor(this.colors.primary)
         .text('Content Insights', 50, doc.y + 25);

      const insights = this.generateContentInsights(data.topPosts);
      insights.forEach((insight, index) => {
        doc.fontSize(10)
           .fillColor(this.colors.secondary)
           .text(`• ${insight}`, 70, doc.y + 12, { width: 450 });
      });
    } else {
      this.addInfoBox(doc, 'Content Performance', [
        'No post data available for analysis',
        'Start creating content to see performance metrics',
        'Regular posting improves engagement rates'
      ]);
    }

    doc.addPage();
  }

  addAudienceInsights(doc, reportData) {
    const { data, platform } = reportData;
    
    this.addSectionTitle(doc, 'Audience Insights');

    // Audience Overview
    const followers = data.reputationBenchmark?.followers || data.companyFollowers || 0;
    const engagementRate = data.engagementScore?.engagementRate || 0;

    this.addInfoBox(doc, 'Audience Overview', [
      `Total Followers: ${this.formatNumber(followers)}`,
      `Engagement Rate: ${engagementRate.toFixed(2)}%`,
      `Platform: ${platform.charAt(0).toUpperCase() + platform.slice(1)}`,
      `Audience Quality: ${this.getAudienceQuality(engagementRate)}`
    ]);

    // Audience Engagement Patterns
    doc.fontSize(14)
       .fillColor(this.colors.primary)
       .text('Engagement Patterns', 50, doc.y + 25);

    const patterns = this.generateEngagementPatterns(data);
    patterns.forEach((pattern, index) => {
      doc.fontSize(10)
         .fillColor(this.colors.secondary)
         .text(`• ${pattern}`, 70, doc.y + 12, { width: 450 });
    });

    doc.addPage();
  }

  addRecommendations(doc, reportData) {
    const { data, platform } = reportData;
    
    this.addSectionTitle(doc, 'Strategic Recommendations');

    // Generate platform-specific recommendations
    const recommendations = this.generateRecommendations(data, platform);

    recommendations.forEach((category, index) => {
      doc.fontSize(13)
         .fillColor(this.colors.primary)
         .text(category.title, 50, doc.y + 20);

      category.items.forEach((item, itemIndex) => {
        doc.fontSize(10)
           .fillColor(this.colors.secondary)
           .text(`${itemIndex + 1}. ${item.action}`, 70, doc.y + 12, { width: 450 });
        
        doc.fontSize(9)
           .fillColor(this.colors.secondary)
           .text(`   Priority: ${item.priority} | Timeline: ${item.timeline}`, 70, doc.y + 8, { width: 450 });
      });
    });

    // Next Steps
    doc.fontSize(14)
       .fillColor(this.colors.primary)
       .text('Next Steps (30-Day Action Plan)', 50, doc.y + 30);

    const nextSteps = [
      'Review and implement high-priority recommendations',
      'Set up regular content calendar based on insights',
      'Monitor engagement metrics weekly',
      'Analyze competitor performance monthly',
      'Adjust strategy based on performance data'
    ];

    nextSteps.forEach((step, index) => {
      doc.fontSize(10)
         .fillColor(this.colors.secondary)
         .text(`${index + 1}. ${step}`, 70, doc.y + 12, { width: 450 });
    });
  }

  // Helper Methods
  addSectionTitle(doc, title) {
    if (doc.y > 700) {
      doc.addPage();
    }

    doc.fontSize(18)
       .fillColor(this.colors.primary)
       .text(title, 50, doc.y + 25);

    doc.moveTo(50, doc.y + 8)
       .lineTo(300, doc.y + 8)
       .strokeColor(this.colors.accent)
       .lineWidth(2)
       .stroke();

    doc.y += 15;
  }

  addInfoBox(doc, title, items) {
    doc.rect(50, doc.y + 10, 495, items.length * 15 + 30)
       .fillColor('#f8f9fa')
       .fill();

    doc.rect(50, doc.y + 10, 495, items.length * 15 + 30)
       .strokeColor(this.colors.accent)
       .lineWidth(1)
       .stroke();

    doc.fontSize(12)
       .fillColor(this.colors.primary)
       .text(title, 60, doc.y + 20);

    doc.fontSize(10)
       .fillColor(this.colors.secondary);
    
    items.forEach((item, index) => {
      doc.text(`• ${item}`, 70, doc.y + 15);
    });

    doc.y += 20;
  }

  drawTable(doc, data, columnWidths) {
    const startY = doc.y + 10;
    const rowHeight = 20;
    let currentY = startY;

    data.forEach((row, rowIndex) => {
      let currentX = 50;
      
      row.forEach((cell, colIndex) => {
        doc.rect(currentX, currentY, columnWidths[colIndex], rowHeight)
           .strokeColor(this.colors.secondary)
           .stroke();

        if (rowIndex === 0) {
          doc.rect(currentX, currentY, columnWidths[colIndex], rowHeight)
             .fillColor('#f8f9fa')
             .fill();
        }

        const fontSize = rowIndex === 0 ? 9 : 8;
        const textColor = rowIndex === 0 ? this.colors.primary : this.colors.secondary;
        
        doc.fontSize(fontSize)
           .fillColor(textColor)
           .text(cell, currentX + 5, currentY + 6, { 
             width: columnWidths[colIndex] - 10, 
             align: 'left' 
           });

        currentX += columnWidths[colIndex];
      });
      
      currentY += rowHeight;
    });

    doc.y = currentY + 10;
  }

  formatNumber(num) {
    if (num >= 1000000) return (num / 1000000).toFixed(1) + 'M';
    if (num >= 1000) return (num / 1000).toFixed(1) + 'K';
    return num.toString();
  }

  formatTimeframe(timeframe) {
    const map = {
      '7d': 'Last 7 Days',
      '30d': 'Last 30 Days',
      '90d': 'Last 90 Days'
    };
    return map[timeframe] || 'Custom Period';
  }

  getEngagementBenchmark(platform) {
    return platform === 'facebook' ? '1.86' : '2.05'; // Industry averages
  }

  getAudienceQuality(engagementRate) {
    if (engagementRate > 3) return 'Excellent';
    if (engagementRate > 1.5) return 'Good';
    if (engagementRate > 0.5) return 'Average';
    return 'Needs Improvement';
  }

  generateContentInsights(posts) {
    if (!posts || posts.length === 0) return ['No posts available for analysis'];

    const insights = [];
    const formats = {};
    
    posts.forEach(post => {
      formats[post.format] = (formats[post.format] || 0) + 1;
    });

    const topFormat = Object.keys(formats).reduce((a, b) => formats[a] > formats[b] ? a : b);
    insights.push(`${topFormat} posts perform best for your audience`);
    
    const avgLikes = posts.reduce((sum, p) => sum + parseInt(p.likes.replace(/[^\d]/g, '')), 0) / posts.length;
    insights.push(`Average likes per post: ${Math.round(avgLikes)}`);
    
    insights.push('Consistent posting schedule improves engagement');
    
    return insights;
  }

  generateEngagementPatterns(data) {
    const patterns = [];
    
    if (data.engagementScore) {
      const { likes, comments, shares } = data.engagementScore;
      const total = likes + comments + shares;
      
      if (likes > comments + shares) {
        patterns.push('Audience prefers to like content rather than engage deeply');
      }
      
      if (comments > likes * 0.1) {
        patterns.push('High comment rate indicates strong audience engagement');
      }
      
      if (shares > total * 0.05) {
        patterns.push('Content is highly shareable - good viral potential');
      }
    }
    
    if (patterns.length === 0) {
      patterns.push('Building engagement patterns - continue consistent posting');
    }
    
    return patterns;
  }

  generateRecommendations(data, platform) {
    const recommendations = [
      {
        title: 'Content Strategy',
        items: [
          {
            action: 'Increase posting frequency to 3-5 times per week',
            priority: 'High',
            timeline: '1-2 weeks'
          },
          {
            action: 'Focus on video content for higher engagement',
            priority: 'Medium',
            timeline: '2-4 weeks'
          }
        ]
      },
      {
        title: 'Audience Engagement',
        items: [
          {
            action: 'Respond to comments within 2 hours during business hours',
            priority: 'High',
            timeline: 'Immediate'
          },
          {
            action: 'Create interactive content (polls, questions)',
            priority: 'Medium',
            timeline: '1-2 weeks'
          }
        ]
      }
    ];

    // Add platform-specific recommendations
    if (platform === 'linkedin') {
      recommendations[0].items.push({
        action: 'Share industry insights and thought leadership content',
        priority: 'High',
        timeline: '1 week'
      });
    } else if (platform === 'facebook') {
      recommendations[0].items.push({
        action: 'Use Facebook Stories for behind-the-scenes content',
        priority: 'Medium',
        timeline: '2 weeks'
      });
    }

    return recommendations;
  }

  addFooter(doc) {
    const pages = doc.bufferedPageRange();
    for (let i = pages.start; i < (pages.start + pages.count); i++) {
      doc.switchToPage(i);
      
      doc.fontSize(8)
         .fillColor(this.colors.secondary)
         .text(`Generated by CLARYX Social Media Analytics - Page ${i - pages.start + 1} of ${pages.count}`, 
               50, 750, { align: 'center', width: 495 });
    }
  }
}

export default new SocialMediaReportService();